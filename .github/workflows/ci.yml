name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Récupération du code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Étape 2 : Configuration de Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Étape 3 : Installation des dépendances
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8

      # Étape 4 : Vérification du style de code (PEP8)
      - name: Lint (PEP8)
        run: |
          flake8 . --count --exit-zero --max-complexity=10 --statistics

      # Étape 5 : Exécution des tests unitaires + couverture
      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest --maxfail=1 --disable-warnings --cov=app --cov-report=xml -q

      # Étape 6 : Construction de l'image Docker
      - name: Build Docker image
        run: docker build -t ci_cd_project .

      # Étape 7 : Exécution du conteneur Docker pour test
      - name: Run Docker container
        run: docker run --rm ci_cd_project

      # Étape 8 : Analyse SonarCloud (optionnelle)
      - name: SonarQube analysis
        uses: sonarsource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Étape 9 : Déploiement simulé (si tout est valide)
      - name: Deploy (simulation)
        if: success()
        run: echo "✅ Déploiement simulé après validation complète du pipeline."
